<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\N9H20K1\HID_Transfer_FirmwareUpdate.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\N9H20K1\HID_Transfer_FirmwareUpdate.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Tue Sep 10 11:01:28 2024
<BR><P>
<H3>Maximum Stack Usage =        284 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EPB_Handler &rArr; HID_GetOutReport &rArr; ProcessCommand &rArr; GetVerInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[22]">Vector_Table</a>
 <LI><a href="#[13]">Reset_Go</a>
 <LI><a href="#[14]">Undefined_Handler</a>
 <LI><a href="#[15]">SWI_Handler1</a>
 <LI><a href="#[16]">Prefetch_Handler</a>
 <LI><a href="#[17]">Abort_Handler</a>
 <LI><a href="#[18]">IRQ_Handler</a>
 <LI><a href="#[19]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[34]">sys_flush_and_clean_dcache</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">sys_flush_and_clean_dcache</a><BR>
 <LI><a href="#[14]">Undefined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">Undefined_Handler</a><BR>
 <LI><a href="#[15]">SWI_Handler1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">SWI_Handler1</a><BR>
 <LI><a href="#[16]">Prefetch_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">Prefetch_Handler</a><BR>
 <LI><a href="#[17]">Abort_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">Abort_Handler</a><BR>
 <LI><a href="#[18]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">IRQ_Handler</a><BR>
 <LI><a href="#[19]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">Abort_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[62]">EPA_Handler</a> from hid.o(.text) referenced from hid.o(.text)
 <LI><a href="#[63]">EPB_Handler</a> from hid.o(.text) referenced from hid.o(.text)
 <LI><a href="#[19]">FIQ_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[18]">IRQ_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[41]">JpegDecHeaderComplete</a> from jpegdec.o(.text) referenced from jpegdec.o(.text)
 <LI><a href="#[16]">Prefetch_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[13]">Reset_Go</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[65]">Reset_Handler</a> from hid.o(.text) referenced from hid.o(.text)
 <LI><a href="#[15]">SWI_Handler1</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[d]">UartEnableInt</a> from wb_uart.o(.text) referenced 2 times from wb_uart.o(.data)
 <LI><a href="#[10]">UartGetChar</a> from wb_uart.o(.text) referenced 2 times from wb_uart.o(.data)
 <LI><a href="#[12]">UartGetChar_NoBlocking</a> from wb_uart.o(.text) referenced 2 times from wb_uart.o(.data)
 <LI><a href="#[c]">UartInitialize</a> from wb_uart.o(.text) referenced 2 times from wb_uart.o(.data)
 <LI><a href="#[b]">UartInstallcallback</a> from wb_uart.o(.text) referenced 2 times from wb_uart.o(.data)
 <LI><a href="#[a]">UartPort</a> from wb_uart.o(.text) referenced 2 times from wb_uart.o(.data)
 <LI><a href="#[f]">UartPutChar</a> from wb_uart.o(.text) referenced 2 times from wb_uart.o(.data)
 <LI><a href="#[e]">UartTransfer</a> from wb_uart.o(.text) referenced 2 times from wb_uart.o(.data)
 <LI><a href="#[11]">UartTransferInt</a> from wb_uart.o(.text) referenced 2 times from wb_uart.o(.data)
 <LI><a href="#[14]">Undefined_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[9]">WB_Interrupt_Shell</a> from wb_aic.o(.text) referenced 124 times from wb_aic.o(.data)
 <LI><a href="#[1d]">hidClassOUT</a> from hid.o(.text) referenced from hid.o(.text)
 <LI><a href="#[1b]">hidFullSpeedInit</a> from hid.o(.text) referenced from hid.o(.text)
 <LI><a href="#[1c]">hidHighSpeedInit</a> from hid.o(.text) referenced from hid.o(.text)
 <LI><a href="#[1e]">jpegISR</a> from jpegcodec.o(.text) referenced from jpegcodec.o(.text)
 <LI><a href="#[1a]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[6c]">spi0IRQHandler</a> from spi.o(.text) referenced from spi.o(.text)
 <LI><a href="#[71]">spi1IRQHandler</a> from spi.o(.text) referenced from spi.o(.text)
 <LI><a href="#[b7]">sysClockDiv</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[b3]">sysClockSwitch</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[a8]">sysFiqHandler</a> from wb_aic.o(.text) referenced from wb_aic.o(.text)
 <LI><a href="#[af]">sysInitDDR</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[a7]">sysIrqHandler</a> from wb_aic.o(.text) referenced from wb_aic.o(.text)
 <LI><a href="#[1f]">sysTimerISR</a> from wb_timer.o(.text) referenced 2 times from wb_timer.o(.text)
 <LI><a href="#[20]">sysUartISR</a> from wb_uart.o(.text) referenced from wb_uart.o(.text)
 <LI><a href="#[a6]">usbd_isr</a> from usbd.o(.text) referenced from usbd.o(.text)
 <LI><a href="#[21]">vpostISR</a> from n9h20_vpost_driver.o(.text) referenced from n9h20_vpost_driver.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>Vector_Table</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[13]"></a>Reset_Go</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[23]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[26]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10c]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10d]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[10e]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[27]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[10f]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[110]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[28]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[111]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[112]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[113]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[114]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[115]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[116]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[117]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[118]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[119]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[120]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[121]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[122]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[123]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[31]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[126]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[127]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[128]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[129]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[25]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[12a]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2a]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2c]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[12b]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2e]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[12c]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[fe]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[30]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[12d]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[32]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[34]"></a>sys_flush_and_clean_dcache</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
</UL>

<P><STRONG><a name="[e6]"></a>sysSetupCP15</STRONG> (ARM, 36 bytes, Stack size 0 bytes, wb_mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[12e]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[33]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via BLX)
</UL>

<P><STRONG><a name="[100]"></a>_ttywrch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display (via BLX)
</UL>

<P><STRONG><a name="[fc]"></a>__user_initial_stackheap</STRONG> (ARM, 44 bytes, Stack size 32 bytes, standalone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[40]"></a>delay</STRONG> (ARM, 56 bytes, Stack size 12 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>main</STRONG> (ARM, 332 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = main &rArr; HIDStart &rArr; GetVerInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInvalidCache
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIDStart
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[41]"></a>JpegDecHeaderComplete</STRONG> (ARM, 336 bytes, Stack size 64 bytes, jpegdec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = JpegDecHeaderComplete &rArr; jpegIoctl &rArr; jpegEncodeTrigger &rArr; jpegCalScalingFactor &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetInfo
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpegdec.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>JpegDec</STRONG> (ARM, 88 bytes, Stack size 16 bytes, jpegdec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = JpegDec &rArr; jpegIoctl &rArr; jpegEncodeTrigger &rArr; jpegCalScalingFactor &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
</UL>

<P><STRONG><a name="[1c]"></a>hidHighSpeedInit</STRONG> (ARM, 212 bytes, Stack size 8 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hidHighSpeedInit
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>hidFullSpeedInit</STRONG> (ARM, 216 bytes, Stack size 8 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hidFullSpeedInit
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>hidClassOUT</STRONG> (ARM, 68 bytes, Stack size 8 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = hidClassOUT &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>GetVerInfo</STRONG> (ARM, 860 bytes, Stack size 40 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = GetVerInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_OpenSPI
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadFast
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIDStart
</UL>

<P><STRONG><a name="[4c]"></a>GetInfo</STRONG> (ARM, 76 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GetInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdGetParameter
</UL>

<P><STRONG><a name="[4d]"></a>SetInfo</STRONG> (ARM, 80 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = SetInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
</UL>

<P><STRONG><a name="[4e]"></a>HID_CmdEraseBlocks</STRONG> (ARM, 52 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = HID_CmdEraseBlocks &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlockNb
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[51]"></a>HID_CmdReadPages</STRONG> (ARM, 476 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = HID_CmdReadPages &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[53]"></a>HID_CmdGetStatus</STRONG> (ARM, 180 bytes, Stack size 8 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_CmdGetStatus &rArr; usiCheckBusyNb
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusyNb
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[5b]"></a>HID_CmdGetStartBlock</STRONG> (ARM, 180 bytes, Stack size 0 bytes, hid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[5c]"></a>HID_CmdGetVersion</STRONG> (ARM, 180 bytes, Stack size 0 bytes, hid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[55]"></a>HID_CmdGetParameter</STRONG> (ARM, 208 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = HID_CmdGetParameter &rArr; GetInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInfo
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[56]"></a>HID_CmdWritePages</STRONG> (ARM, 76 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = HID_CmdWritePages &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[57]"></a>HID_CmdImageWrite</STRONG> (ARM, 60 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = HID_CmdImageWrite &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[58]"></a>HID_CmdTest</STRONG> (ARM, 124 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = HID_CmdTest &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[5a]"></a>CalCheckSum</STRONG> (ARM, 52 bytes, Stack size 8 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[59]"></a>ProcessCommand</STRONG> (ARM, 864 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = ProcessCommand &rArr; GetVerInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableWatchDogTimerReset
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableWatchDogTimer
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlockNb
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCheckSum
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdTest
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdImageWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdWritePages
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdGetParameter
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdGetVersion
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdGetStartBlock
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdGetStatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdReadPages
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdEraseBlocks
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVerInfo
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
</UL>

<P><STRONG><a name="[5f]"></a>HID_GetOutReport</STRONG> (ARM, 1064 bytes, Stack size 40 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = HID_GetOutReport &rArr; ProcessCommand &rArr; GetVerInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInfo
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDec
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPB_Handler
</UL>

<P><STRONG><a name="[61]"></a>HID_SetInReport</STRONG> (ARM, 520 bytes, Stack size 24 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HID_SetInReport &rArr; spiFlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPA_Handler
</UL>

<P><STRONG><a name="[62]"></a>EPA_Handler</STRONG> (ARM, 20 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EPA_Handler &rArr; HID_SetInReport &rArr; spiFlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetInReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>EPB_Handler</STRONG> (ARM, 20 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = EPB_Handler &rArr; HID_GetOutReport &rArr; ProcessCommand &rArr; GetVerInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>Reset_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, hid.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>hidInit</STRONG> (ARM, 444 bytes, Stack size 8 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hidInit
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIDStart
</UL>

<P><STRONG><a name="[3f]"></a>HIDStart</STRONG> (ARM, 32 bytes, Stack size 8 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = HIDStart &rArr; GetVerInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcOpen
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidInit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVerInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>spiActive</STRONG> (ARM, 104 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashExit4ByteMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEnter4ByteMode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseAll
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseSector
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashReset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteDisable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiReadID
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusyNb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlockNb
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadFast
</UL>

<P><STRONG><a name="[12f]"></a>spiSetGo</STRONG> (ARM, 60 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>spiIsBusy</STRONG> (ARM, 40 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiClose
</UL>

<P><STRONG><a name="[78]"></a>spiTxLen</STRONG> (ARM, 152 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashExit4ByteMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEnter4ByteMode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseAll
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseSector
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashReset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteDisable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiReadID
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusyNb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlockNb
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadFast
</UL>

<P><STRONG><a name="[6a]"></a>spiSetClock</STRONG> (ARM, 80 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spiSetClock &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoctl
</UL>

<P><STRONG><a name="[130]"></a>spiSetByteEndin</STRONG> (ARM, 120 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>spiEnableInt</STRONG> (ARM, 56 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>spiDisableInt</STRONG> (ARM, 56 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>spi0IRQHandler</STRONG> (ARM, 56 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>spi1IRQHandler</STRONG> (ARM, 56 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi1IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>spiInstallCallBack</STRONG> (ARM, 140 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>

<P><STRONG><a name="[72]"></a>spiOpen</STRONG> (ARM, 1256 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[73]"></a>spiClose</STRONG> (ARM, 280 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIsBusy
</UL>

<P><STRONG><a name="[76]"></a>spiIoctl</STRONG> (ARM, 56 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spiIoctl &rArr; spiSetClock &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
</UL>

<P><STRONG><a name="[133]"></a>spiEnable</STRONG> (ARM, 64 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>spiDisable</STRONG> (ARM, 64 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>spiRead</STRONG> (ARM, 440 bytes, Stack size 20 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[7a]"></a>spiWrite</STRONG> (ARM, 316 bytes, Stack size 20 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[135]"></a>spiSSEnable</STRONG> (ARM, 244 bytes, Stack size 12 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>spiSSDisable</STRONG> (ARM, 52 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>spiTransfer</STRONG> (ARM, 1652 bytes, Stack size 56 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[137]"></a>spiRtosInit</STRONG> (ARM, 12 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>usiCheckBusy</STRONG> (ARM, 152 bytes, Stack size 8 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usiCheckBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseAll
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseSector
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashReset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIDStart
</UL>

<P><STRONG><a name="[7c]"></a>usiReadID</STRONG> (ARM, 184 bytes, Stack size 8 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usiReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
</UL>

<P><STRONG><a name="[7d]"></a>usiWriteEnable</STRONG> (ARM, 84 bytes, Stack size 8 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usiWriteEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseAll
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseSector
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlockNb
</UL>

<P><STRONG><a name="[7e]"></a>usiWriteDisable</STRONG> (ARM, 84 bytes, Stack size 8 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[7f]"></a>usiStatusWrite</STRONG> (ARM, 124 bytes, Stack size 8 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usiStatusWrite &rArr; usiWriteEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashReset
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
</UL>

<P><STRONG><a name="[67]"></a>spiFlashInit</STRONG> (ARM, 288 bytes, Stack size 16 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = spiFlashInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiReadID
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoctl
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIDStart
</UL>

<P><STRONG><a name="[81]"></a>spiFlashReset</STRONG> (ARM, 172 bytes, Stack size 8 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
</UL>

<P><STRONG><a name="[83]"></a>spiFlashEraseSector</STRONG> (ARM, 328 bytes, Stack size 16 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
</UL>

<P><STRONG><a name="[84]"></a>spiFlashEraseBlock</STRONG> (ARM, 256 bytes, Stack size 16 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
</UL>

<P><STRONG><a name="[85]"></a>spiFlashEraseAll</STRONG> (ARM, 92 bytes, Stack size 8 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
</UL>

<P><STRONG><a name="[60]"></a>spiFlashWrite</STRONG> (ARM, 412 bytes, Stack size 32 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spiFlashWrite &rArr; usiWriteEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
</UL>

<P><STRONG><a name="[52]"></a>spiFlashRead</STRONG> (ARM, 388 bytes, Stack size 32 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spiFlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetInReport
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdReadPages
</UL>

<P><STRONG><a name="[86]"></a>spiFlashEnter4ByteMode</STRONG> (ARM, 96 bytes, Stack size 8 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[87]"></a>spiFlashExit4ByteMode</STRONG> (ARM, 92 bytes, Stack size 8 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[54]"></a>usiCheckBusyNb</STRONG> (ARM, 144 bytes, Stack size 8 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usiCheckBusyNb
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdGetStatus
</UL>

<P><STRONG><a name="[50]"></a>spiFlashEraseBlockNb</STRONG> (ARM, 196 bytes, Stack size 8 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spiFlashEraseBlockNb &rArr; usiWriteEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdEraseBlocks
</UL>

<P><STRONG><a name="[88]"></a>EDMAMasterRead</STRONG> (ARM, 152 bytes, Stack size 12 bytes, spiread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EDMAMasterRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadFast
</UL>

<P><STRONG><a name="[4b]"></a>SPIReadFast</STRONG> (ARM, 424 bytes, Stack size 32 bytes, spiread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPIReadFast &rArr; EDMAMasterRead
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMAMasterRead
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVerInfo
</UL>

<P><STRONG><a name="[49]"></a>SPI_OpenSPI</STRONG> (ARM, 52 bytes, Stack size 0 bytes, spiread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVerInfo
</UL>

<P><STRONG><a name="[138]"></a>SPI_CloseSPI</STRONG> (ARM, 40 bytes, Stack size 0 bytes, spiread.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>vpostLCMInit</STRONG> (ARM, 28 bytes, Stack size 16 bytes, n9h20_vpost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vpostLCMInit &rArr; vpostLCMInit_FW043TFT_480x272 &rArr; vpostAllocVABuffer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>vpostLCMDeinit</STRONG> (ARM, 12 bytes, Stack size 8 bytes, n9h20_vpost.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMDeinit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[139]"></a>vpostGetFrameBuffer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, n9h20_vpost.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>vpostSetFrameBuffer</STRONG> (ARM, 36 bytes, Stack size 0 bytes, n9h20_vpost.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>LCDDelay</STRONG> (ARM, 60 bytes, Stack size 8 bytes, n9h20_vpost.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>jpegInit</STRONG> (ARM, 136 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDec
</UL>

<P><STRONG><a name="[95]"></a>jpegGetDimension</STRONG> (ARM, 32 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[94]"></a>jpegSetDimension</STRONG> (ARM, 24 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[93]"></a>jpegSetScalingFactor</STRONG> (ARM, 228 bytes, Stack size 12 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = jpegSetScalingFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[8c]"></a>jpegCalScalingFactor</STRONG> (ARM, 440 bytes, Stack size 32 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = jpegCalScalingFactor &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[92]"></a>jpegGetDecodedDimension</STRONG> (ARM, 28 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[1e]"></a>jpegISR</STRONG> (ARM, 1068 bytes, Stack size 64 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = jpegISR &rArr; jpegCalScalingFactor &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetDecodedDimension
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetScalingFactor
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetDimension
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetDimension
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpegcodec.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>jpegWait</STRONG> (ARM, 36 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>jpegIsReady</STRONG> (ARM, 24 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>jpegGetInfo</STRONG> (ARM, 12 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpegGetInfo &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecHeaderComplete
</UL>

<P><STRONG><a name="[13e]"></a>jpegPower</STRONG> (ARM, 36 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>jpegOpen</STRONG> (ARM, 196 bytes, Stack size 40 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = jpegOpen &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>jpegSetEncodeMode</STRONG> (ARM, 236 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[9c]"></a>jpegSetDecodeMode</STRONG> (ARM, 148 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[98]"></a>jpegDecodeTrigger</STRONG> (ARM, 116 bytes, Stack size 16 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jpegDecodeTrigger &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[9a]"></a>jpegEncodeTrigger</STRONG> (ARM, 556 bytes, Stack size 48 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = jpegEncodeTrigger &rArr; jpegCalScalingFactor &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetScalingFactor
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetDimension
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetDimension
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[13f]"></a>jpegGetScalingFactor</STRONG> (ARM, 72 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>jpegSetWindowDecode</STRONG> (ARM, 60 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[9f]"></a>jpegAdjustQTAB</STRONG> (ARM, 52 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[9b]"></a>jpegSetQTAB</STRONG> (ARM, 384 bytes, Stack size 24 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpegSetQTAB
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[43]"></a>jpegIoctl</STRONG> (ARM, 868 bytes, Stack size 24 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = jpegIoctl &rArr; jpegEncodeTrigger &rArr; jpegCalScalingFactor &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetQTAB
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegAdjustQTAB
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetWindowDecode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecodeTrigger
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetDecodeMode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetEncodeMode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetDimension
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDec
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecHeaderComplete
</UL>

<P><STRONG><a name="[a0]"></a>jpegClose</STRONG> (ARM, 44 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>

<P><STRONG><a name="[140]"></a>jpegPollInt</STRONG> (ARM, 24 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>usbdClearAllFlags</STRONG> (ARM, 64 bytes, Stack size 8 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbdClearAllFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_packet
</UL>

<P><STRONG><a name="[66]"></a>udcOpen</STRONG> (ARM, 332 bytes, Stack size 16 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = udcOpen &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputKhz
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIDStart
</UL>

<P><STRONG><a name="[a3]"></a>usbd_update_device</STRONG> (ARM, 1352 bytes, Stack size 8 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_update_device
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[a4]"></a>usbd_send_descriptor</STRONG> (ARM, 1412 bytes, Stack size 40 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_send_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[a5]"></a>usbd_control_packet</STRONG> (ARM, 5044 bytes, Stack size 32 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_control_packet &rArr; usbdClearAllFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbdClearAllFlags
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[a6]"></a>usbd_isr</STRONG> (ARM, 3564 bytes, Stack size 32 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usbd_isr &rArr; usbd_control_packet &rArr; usbdClearAllFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_packet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_send_descriptor
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_update_device
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbdClearAllFlags
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>udcInit</STRONG> (ARM, 340 bytes, Stack size 8 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udcInit &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIDStart
</UL>

<P><STRONG><a name="[141]"></a>udcDeinit</STRONG> (ARM, 36 bytes, Stack size 0 bytes, usbd.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>udcClose</STRONG> (ARM, 24 bytes, Stack size 0 bytes, usbd.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>udcIsAttached</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usbd.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>udcIsAttachedToHost</STRONG> (ARM, 12 bytes, Stack size 0 bytes, usbd.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>udcSetSupendCallBack</STRONG> (ARM, 12 bytes, Stack size 0 bytes, usbd.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>udcSetResumeCallBack</STRONG> (ARM, 12 bytes, Stack size 0 bytes, usbd.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>sysIrqHandler</STRONG> (ARM, 216 bytes, Stack size 32 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>sysFiqHandler</STRONG> (ARM, 216 bytes, Stack size 32 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysFiqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>WB_Interrupt_Shell</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>sysInitializeAIC</STRONG> (ARM, 60 bytes, Stack size 8 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
</UL>

<P><STRONG><a name="[75]"></a>sysDisableInterrupt</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStopTimer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegClose
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiClose
</UL>

<P><STRONG><a name="[70]"></a>sysEnableInterrupt</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostInstallCallBack
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInstallCallBack
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
</UL>

<P><STRONG><a name="[147]"></a>sysInstallExceptionHandler</STRONG> (ARM, 136 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>sysInstallFiqHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>sysInstallIrqHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>sysInstallISR</STRONG> (ARM, 328 bytes, Stack size 24 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostInstallCallBack
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStopTimer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInstallCallBack
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
</UL>

<P><STRONG><a name="[14a]"></a>sysSetGlobalInterrupt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>sysSetInterruptPriorityLevel</STRONG> (ARM, 196 bytes, Stack size 16 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>sysSetInterruptType</STRONG> (ARM, 152 bytes, Stack size 12 bytes, wb_aic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
</UL>

<P><STRONG><a name="[6f]"></a>sysSetLocalInterrupt</STRONG> (ARM, 140 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInstallCallBack
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcInit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
</UL>

<P><STRONG><a name="[14c]"></a>sysSetAIC2SWMode</STRONG> (ARM, 16 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>sysGetInterruptEnableStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>sysGetIBitState</STRONG> (ARM, 28 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>sysGetSdramSizebyMB</STRONG> (ARM, 284 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>sysEnableCache</STRONG> (ARM, 44 bytes, Stack size 8 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysEnableCache &rArr; sysInitMMUTable
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>sysDisableCache</STRONG> (ARM, 64 bytes, Stack size 8 bytes, wb_cache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>

<P><STRONG><a name="[3a]"></a>sysFlushCache</STRONG> (ARM, 112 bytes, Stack size 16 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>sysInvalidCache</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>sysGetCacheState</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>

<P><STRONG><a name="[150]"></a>sysGetCacheMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>_sysLockCode</STRONG> (ARM, 132 bytes, Stack size 12 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>_sysUnLockCode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>InitDelay</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>sysInitDDR</STRONG> (ARM, 280 bytes, Stack size 0 bytes, wb_config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>sysInitDDRStart</STRONG> (ARM, 112 bytes, Stack size 16 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMemory
</UL>

<P><STRONG><a name="[b0]"></a>sysInitMemory</STRONG> (ARM, 16 bytes, Stack size 8 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitDDRStart
</UL>

<P><STRONG><a name="[a2]"></a>sysGetPLLOutputKhz</STRONG> (ARM, 144 bytes, Stack size 40 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sysGetPLLOutputKhz
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockDivSwitchStart
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcOpen
</UL>

<P><STRONG><a name="[154]"></a>sysCheckPllConstraint</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>sysGetPLLControlRegister</STRONG> (ARM, 396 bytes, Stack size 64 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sysGetPLLControlRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
</UL>

<P><STRONG><a name="[155]"></a>sysSetPLLControlRegister</STRONG> (ARM, 40 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>sysExternalClock</STRONG> (ARM, 60 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>sysClockSwitch</STRONG> (ARM, 872 bytes, Stack size 32 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysClockSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>sysClockSwitchStart</STRONG> (ARM, 180 bytes, Stack size 64 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysClockSwitchStart
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
</UL>

<P><STRONG><a name="[36]"></a>sysGetExternalClock</STRONG> (ARM, 92 bytes, Stack size 8 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysGetExternalClock
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChipVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockDivSwitchStart
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcOpen
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>sysSetSystemClock</STRONG> (ARM, 1180 bytes, Stack size 48 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = sysSetSystemClock &rArr; sysClockSwitchStart
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockSwitchStart
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLControlRegister
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>sysGetSystemClock</STRONG> (ARM, 136 bytes, Stack size 12 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysGetSystemClock
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
</UL>

<P><STRONG><a name="[b5]"></a>sysSetPllClock</STRONG> (ARM, 224 bytes, Stack size 24 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLControlRegister
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputKhz
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>

<P><STRONG><a name="[b7]"></a>sysClockDiv</STRONG> (ARM, 392 bytes, Stack size 12 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysClockDiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>sysClockDivSwitchStart</STRONG> (ARM, 296 bytes, Stack size 32 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputKhz
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[b8]"></a>sysPowerDownPLL</STRONG> (ARM, 196 bytes, Stack size 16 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>

<P><STRONG><a name="[b9]"></a>sysGetCPUClock</STRONG> (ARM, 320 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = sysGetCPUClock &rArr; sysGetPLLOutputKhz
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputKhz
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
</UL>

<P><STRONG><a name="[ba]"></a>sysSetCPUClock</STRONG> (ARM, 276 bytes, Stack size 24 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputKhz
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[80]"></a>sysGetAPBClock</STRONG> (ARM, 72 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = sysGetAPBClock &rArr; sysGetCPUClock &rArr; sysGetPLLOutputKhz
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
</UL>

<P><STRONG><a name="[bb]"></a>sysSetAPBClock</STRONG> (ARM, 192 bytes, Stack size 24 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[bc]"></a>sysGetClock</STRONG> (ARM, 1088 bytes, Stack size 40 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputKhz
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1f]"></a>sysTimerISR</STRONG> (ARM, 512 bytes, Stack size 8 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysTimerISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_timer.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>sysGetTicks</STRONG> (ARM, 76 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>

<P><STRONG><a name="[157]"></a>sysResetTicks</STRONG> (ARM, 84 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>sysUpdateTickCount</STRONG> (ARM, 76 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>sysSetTimerReferenceClock</STRONG> (ARM, 76 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>sysStartTimer</STRONG> (ARM, 552 bytes, Stack size 24 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetInterruptType
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>

<P><STRONG><a name="[bf]"></a>sysStopTimer</STRONG> (ARM, 264 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>

<P><STRONG><a name="[15a]"></a>sysClearWatchDogTimerCount</STRONG> (ARM, 44 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>sysClearWatchDogTimerInterruptStatus</STRONG> (ARM, 44 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>sysDisableWatchDogTimer</STRONG> (ARM, 44 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>sysDisableWatchDogTimerReset</STRONG> (ARM, 44 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>sysEnableWatchDogTimer</STRONG> (ARM, 44 bytes, Stack size 8 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysEnableWatchDogTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[5e]"></a>sysEnableWatchDogTimerReset</STRONG> (ARM, 44 bytes, Stack size 8 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysEnableWatchDogTimerReset
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[c0]"></a>sysInstallWatchDogTimerISR</STRONG> (ARM, 92 bytes, Stack size 24 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>

<P><STRONG><a name="[15e]"></a>sysSetWatchDogTimerInterval</STRONG> (ARM, 60 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>sysSetTimerEvent</STRONG> (ARM, 444 bytes, Stack size 16 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>sysClearTimerEvent</STRONG> (ARM, 180 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>sysDOS_Time_To_UTC</STRONG> (ARM, 300 bytes, Stack size 16 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalTime
</UL>

<P><STRONG><a name="[c1]"></a>sysUTC_To_DOS_Time</STRONG> (ARM, 320 bytes, Stack size 24 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
</UL>

<P><STRONG><a name="[c2]"></a>sysSetLocalTime</STRONG> (ARM, 64 bytes, Stack size 28 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDOS_Time_To_UTC
</UL>

<P><STRONG><a name="[c4]"></a>sysGetCurrentTime</STRONG> (ARM, 68 bytes, Stack size 16 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUTC_To_DOS_Time
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[82]"></a>sysDelay</STRONG> (ARM, 96 bytes, Stack size 16 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPowerDownPLL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashReset
</UL>

<P><STRONG><a name="[35]"></a>sysUartPort</STRONG> (ARM, 156 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPort
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>sysUartInstallcallback</STRONG> (ARM, 120 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInstallcallback
</UL>

<P><STRONG><a name="[d2]"></a>sysUartEnableInt</STRONG> (ARM, 148 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartEnableInt
</UL>

<P><STRONG><a name="[37]"></a>sysInitializeUART</STRONG> (ARM, 416 bytes, Stack size 16 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sysInitializeUART &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBaudRate
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInitialize
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>_PutChar_f</STRONG> (ARM, 456 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[c7]"></a>sysPutString</STRONG> (ARM, 40 bytes, Stack size 8 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysPutString
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[b4]"></a>sysGetChipVersion</STRONG> (ARM, 36 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutChar
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>

<P><STRONG><a name="[3c]"></a>sysprintf</STRONG> (ARM, 360 bytes, Stack size 40 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChipVersion
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartEnableDebugMessage
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockDivSwitchStart
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiOpen
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcOpen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdTest
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdImageWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdWritePages
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdReadPages
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdEraseBlocks
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInfo
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInfo
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVerInfo
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidClassOUT
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>sysUartEnableDebugMessage</STRONG> (ARM, 64 bytes, Stack size 8 bytes, wb_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[cf]"></a>sysPrintf</STRONG> (ARM, 288 bytes, Stack size 40 bytes, wb_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChipVersion
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>

<P><STRONG><a name="[d4]"></a>sysGetChar</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetChar
</UL>

<P><STRONG><a name="[161]"></a>sysGetChar_NoBlocking</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>sysPutChar</STRONG> (ARM, 156 bytes, Stack size 4 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sysPutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChipVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutChar
</UL>

<P><STRONG><a name="[d3]"></a>sysUartTransfer</STRONG> (ARM, 68 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTransfer
</UL>

<P><STRONG><a name="[12]"></a>UartGetChar_NoBlocking</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>vpostLCMInit_FW043TFT_480x272</STRONG> (ARM, 428 bytes, Stack size 40 bytes, n9h20_vpost_fw043tft_480x272.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = vpostLCMInit_FW043TFT_480x272 &rArr; vpostAllocVABuffer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostsetLCM_TimingType
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostVAStopTrigger
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostVAStartTrigger
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetYUVEndianSelect
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_VTiming
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_SignalPolarity
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_ImageWindow
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_HTiming
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetParalelSyncLCM_Interface
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetLCM_TypeSelect
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetLCM_ImageSource
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetFrameBuffer_DataType
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetDataBusPin
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABufferFromAP
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABuffer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPLLOutputKhz
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit
</UL>

<P><STRONG><a name="[8b]"></a>vpostLCMDeinit_FW043TFT_480x272</STRONG> (ARM, 40 bytes, Stack size 8 bytes, n9h20_vpost_fw043tft_480x272.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostVAStopTrigger
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostFreeVABuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMDeinit
</UL>

<P><STRONG><a name="[162]"></a>vpostEnaBacklight</STRONG> (ARM, 60 bytes, Stack size 0 bytes, n9h20_vpost_fw043tft_480x272.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>sysSetMMUMappingMethod</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wb_mmu.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>sysInitMMUTable</STRONG> (ARM, 168 bytes, Stack size 8 bytes, wb_mmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysInitMMUTable
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetupCP15
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
</UL>

<P><STRONG><a name="[e4]"></a>vpostVAStartTrigger</STRONG> (ARM, 24 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[d6]"></a>vpostVAStopTrigger</STRONG> (ARM, 24 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMDeinit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[164]"></a>vpostVAStartTrigger_MPUContinue</STRONG> (ARM, 88 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>vpostVAStartTrigger_MPUSingle</STRONG> (ARM, 88 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>vpostVAStopTriggerMPU</STRONG> (ARM, 24 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>vpostClearVABuffer</STRONG> (ARM, 60 bytes, Stack size 8 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vpostClearVABuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABuffer
</UL>

<P><STRONG><a name="[e1]"></a>vpostAllocVABuffer</STRONG> (ARM, 168 bytes, Stack size 16 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = vpostAllocVABuffer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostClearVABuffer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_pointer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[e0]"></a>vpostAllocVABufferFromAP</STRONG> (ARM, 44 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[e5]"></a>vpostFreeVABuffer</STRONG> (ARM, 60 bytes, Stack size 8 bytes, n9h20_vpost_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMDeinit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[167]"></a>vpostSetLCDEnable</STRONG> (ARM, 72 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>vpostSetLCDConfig</STRONG> (ARM, 68 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>vpostsetLCM_TimingType</STRONG> (ARM, 56 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[d9]"></a>vpostSetLCM_TypeSelect</STRONG> (ARM, 32 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[169]"></a>vpostSetSerialSyncLCM_Interface</STRONG> (ARM, 32 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>vpostSetSerialSyncLCM_ColorOrder</STRONG> (ARM, 56 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>vpostSetSerialSyncLCM_CCIR656ModeSelect</STRONG> (ARM, 32 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>vpostSetParalelSyncLCM_Interface</STRONG> (ARM, 32 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[e2]"></a>vpostSetFrameBuffer_DataType</STRONG> (ARM, 32 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[16c]"></a>vpostSetFrameBuffer_BaseAddress</STRONG> (ARM, 16 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>vpostSetYUVEndianSelect</STRONG> (ARM, 32 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[d7]"></a>vpostSetDataBusPin</STRONG> (ARM, 416 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[16d]"></a>vpostSetDataBusPin_noDE</STRONG> (ARM, 416 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>vpostSetDataBusPin_onlyDE</STRONG> (ARM, 416 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>vpostSetSyncLCM_HTiming</STRONG> (ARM, 84 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[dd]"></a>vpostSetSyncLCM_VTiming</STRONG> (ARM, 48 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[de]"></a>vpostSetSyncLCM_ImageWindow</STRONG> (ARM, 100 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[df]"></a>vpostSetSyncLCM_SignalPolarity</STRONG> (ARM, 152 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[16f]"></a>vpostSetTVEnableConfig</STRONG> (ARM, 176 bytes, Stack size 24 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>vpostSetLCM_ImageSource</STRONG> (ARM, 28 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[170]"></a>vpostMPULCDWriteAddr16Bit</STRONG> (ARM, 172 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>vpostMPULCDWriteData16Bit</STRONG> (ARM, 168 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>vpostMPULCDReadData16Bit</STRONG> (ARM, 164 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>vpostEnableInt</STRONG> (ARM, 36 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>vpostDisableInt</STRONG> (ARM, 36 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>vpostClearInt</STRONG> (ARM, 44 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostISR
</UL>

<P><STRONG><a name="[eb]"></a>vpostIsIntEnabled</STRONG> (ARM, 36 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostISR
</UL>

<P><STRONG><a name="[ed]"></a>vpostInstallCallBack</STRONG> (ARM, 212 bytes, Stack size 16 bytes, n9h20_vpost_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>

<P><STRONG><a name="[175]"></a>vpostSetMPULCM_ImageWindow</STRONG> (ARM, 76 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>vpostSetMPULCM_TimingConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>vpostSetMPULCM_BusModeSelect</STRONG> (ARM, 28 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>vpostSetOSD_Enable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>vpostSetOSD_Disable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>vpostSetOSD_Size</STRONG> (ARM, 60 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>vpostSetOSD_Pos</STRONG> (ARM, 124 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>vpostSetOSD_DataType</STRONG> (ARM, 32 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>vpostSetOSD_Transparent_Enable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>vpostSetOSD_Transparent_Disable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>vpostSetOSD_Transparent</STRONG> (ARM, 96 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>vpostSetOSD_BaseAddress</STRONG> (ARM, 12 bytes, Stack size 0 bytes, n9h20_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABuffer (via BLX)
</UL>

<P><STRONG><a name="[ea]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostFreeVABuffer (via BLX)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[cd]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem (via BLX)
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockDivSwitchStart
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockSwitchStart
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitDDRStart
</UL>

<P><STRONG><a name="[f0]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[181]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetInfo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostClearVABuffer
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVerInfo
</UL>

<P><STRONG><a name="[f1]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[185]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecodeTrigger
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_uread4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_packet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_send_descriptor
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_update_device
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetInReport
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdImageWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdWritePages
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdGetParameter
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdReadPages
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdEraseBlocks
</UL>

<P><STRONG><a name="[188]"></a>__rt_uread4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_uwrite4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_packet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_send_descriptor
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_update_device
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbdClearAllFlags
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcOpen
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetInReport
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdImageWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdWritePages
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CmdReadPages
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidFullSpeedInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidHighSpeedInit
</UL>

<P><STRONG><a name="[189]"></a>__rt_uwrite4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetClock
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
</UL>

<P><STRONG><a name="[ee]"></a>__rt_heap_descriptor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via BLX)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>

<P><STRONG><a name="[18b]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[f5]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[29]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[f8]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[18e]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[f6]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[f7]"></a>__rt_heap_escrow</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[f3]"></a>__rt_heap_expand</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[2b]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2f]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[fa]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[f9]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ff]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_pointer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPLLOutputKhz
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBaudRate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUTC_To_DOS_Time
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetClock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockDivSwitchStart
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLControlRegister
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputKhz
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcOpen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecHeaderComplete
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
</UL>

<P><STRONG><a name="[105]"></a>__fpl_fcheck_NaN1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[107]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[10a]"></a>_ffixu</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[190]"></a>_fflt</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[191]"></a>_ffltu</STRONG> (ARM, 40 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[109]"></a>__fpl_fnaninf</STRONG> (ARM, 160 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[108]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[106]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[8f]"></a>__ARM_scalbnf</STRONG> (ARM, 92 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[10b]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14]"></a>Undefined_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[15]"></a>SWI_Handler1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[16]"></a>Prefetch_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[17]"></a>Abort_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[18]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[19]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[20]"></a>sysUartISR</STRONG> (ARM, 828 bytes, Stack size 24 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysUartISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>sysSetBaudRate</STRONG> (ARM, 56 bytes, Stack size 16 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sysSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
</UL>

<P><STRONG><a name="[c9]"></a>sysPutRepChar</STRONG> (ARM, 40 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysPutRepChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[ca]"></a>sysPutStringReverse</STRONG> (ARM, 40 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[cb]"></a>sysPutNumber</STRONG> (ARM, 412 bytes, Stack size 80 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[cc]"></a>FormatItem</STRONG> (ARM, 540 bytes, Stack size 40 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[11]"></a>UartTransferInt</STRONG> (ARM, 240 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UartTransferInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>UartPort</STRONG> (ARM, 20 bytes, Stack size 4 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UartPort
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>UartInstallcallback</STRONG> (ARM, 28 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UartInstallcallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartInstallcallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>UartInitialize</STRONG> (ARM, 28 bytes, Stack size 16 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = UartInitialize &rArr; sysInitializeUART &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>UartEnableInt</STRONG> (ARM, 20 bytes, Stack size 8 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartEnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartEnableInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>UartTransfer</STRONG> (ARM, 28 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>UartPutChar</STRONG> (ARM, 20 bytes, Stack size 4 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartPutChar &rArr; sysPutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>UartGetChar</STRONG> (ARM, 20 bytes, Stack size 4 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UartGetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.data)
</UL>
<P><STRONG><a name="[d5]"></a>GetPLLOutputKhz</STRONG> (ARM, 128 bytes, Stack size 40 bytes, n9h20_vpost_fw043tft_480x272.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GetPLLOutputKhz
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_FW043TFT_480x272
</UL>

<P><STRONG><a name="[e7]"></a>shift_pointer</STRONG> (ARM, 72 bytes, Stack size 24 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = shift_pointer
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABuffer
</UL>

<P><STRONG><a name="[21]"></a>vpostISR</STRONG> (ARM, 288 bytes, Stack size 8 bytes, n9h20_vpost_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vpostISR
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostIsIntEnabled
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostClearInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> n9h20_vpost_driver.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[102]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[101]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[104]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[fd]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
